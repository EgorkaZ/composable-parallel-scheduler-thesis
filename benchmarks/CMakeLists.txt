list(APPEND OMP_MODES OMP_STATIC OMP_DYNAMIC OMP_GUIDED OMP_RUNTIME)
list(APPEND TBB_MODES TBB_SIMPLE TBB_AUTO TBB_AFFINITY TBB_CONST_AFFINITY)
# TODO: add rapid start proof of concept for TBB

list(APPEND BENCHMARKS bench_spmv_balanced bench_spmv_unbalanced bench_reduce bench_scan bench_scheduling)
list(APPEND SCHEDULING_MEASURE_MODES WAITING BARRIER MULTITASK)

foreach(bench IN LISTS BENCHMARKS)
    # serial
    if (NOT bench STREQUAL bench_scheduling)
        add_executable(${bench}_SERIAL ${bench}.cpp)
        target_compile_definitions(${bench}_SERIAL PRIVATE SERIAL=1)
        target_link_libraries(${bench}_SERIAL benchmark::benchmark)
    endif()
    # openmp
    foreach(mode IN LISTS OMP_MODES)
        if (bench STREQUAL bench_scheduling)
            foreach(scheduling_measure_mode IN LISTS SCHEDULING_MEASURE_MODES)
                add_executable(${bench}_${mode}_${scheduling_measure_mode} ${bench}.cpp)
                target_compile_definitions(${bench}_${mode}_${scheduling_measure_mode} PRIVATE OMP_MODE=${mode} SCHEDULING_MEASURE_MODE=${scheduling_measure_mode})
                target_link_libraries(${bench}_${mode}_${scheduling_measure_mode} benchmark::benchmark OpenMP::OpenMP_CXX)
            endforeach()
        else()
            add_executable(${bench}_${mode} ${bench}.cpp)
            target_compile_definitions(${bench}_${mode} PRIVATE OMP_MODE=${mode})
            target_link_libraries(${bench}_${mode} benchmark::benchmark OpenMP::OpenMP_CXX)
        endif()
    endforeach()
    # tbb
    foreach(mode IN LISTS TBB_MODES)
        if (bench STREQUAL bench_scheduling)
            foreach(scheduling_measure_mode IN LISTS SCHEDULING_MEASURE_MODES)
                add_executable(${bench}_${mode}_${scheduling_measure_mode} ${bench}.cpp)
                target_compile_definitions(${bench}_${mode}_${scheduling_measure_mode} PRIVATE TBB_MODE=${mode} SCHEDULING_MEASURE_MODE=${scheduling_measure_mode})
                target_link_libraries(${bench}_${mode}_${scheduling_measure_mode} benchmark::benchmark TBB::tbb)
            endforeach()
        else()
            add_executable(${bench}_${mode} ${bench}.cpp)
            target_compile_definitions(${bench}_${mode} PRIVATE TBB_MODE=${mode})
            target_link_libraries(${bench}_${mode} benchmark::benchmark TBB::tbb)
        endif()
    endforeach()
endforeach()

add_subdirectory(tests)
